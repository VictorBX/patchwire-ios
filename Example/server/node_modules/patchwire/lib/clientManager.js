'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _ = require('lodash');
var DEBUG_MODE = process.env.GM_SERVER_DEBUG === 'true';

var ClientManager = (function () {
  function ClientManager() {
    _classCallCheck(this, ClientManager);

    this.clients = [];
    this.commandHandlers = {};
    this.eventHandlers = {};
    this.persistedData = {};
  }

  _createClass(ClientManager, [{
    key: 'getClients',
    value: function getClients() {
      return this.clients;
    }
  }, {
    key: 'getClientCount',
    value: function getClientCount() {
      return this.clients.length;
    }
  }, {
    key: 'set',
    value: function set(key, value) {
      this.persistedData[key] = value;
    }
  }, {
    key: 'get',
    value: function get(key) {
      return this.persistedData[key];
    }
  }, {
    key: 'addClient',
    value: function addClient(client) {
      var _this = this;

      client.onData(function (data) {
        _this.handleIncomingCommand(client, data);
      });

      client.on('close', function () {
        _this.fire('clientDropped', client);
        _this.removeClient(client.clientId);
      });

      client.on('error', function (error) {
        console.error(error);
      });

      this.clients.push(client);
      this.fire('clientAdded', client);
    }
  }, {
    key: 'removeClient',
    value: function removeClient(clientId) {

      var removed = _.remove(this.clients, function (client) {
        return client.clientId === clientId;
      });

      if (removed.length > 0) {
        return removed[0];
      } else {
        return undefined;
      }
    }
  }, {
    key: 'broadcast',
    value: function broadcast(command, data) {

      if (typeof data === 'undefined') {
        data = command;
      } else {
        data.command = command;
      }

      this.clients.forEach(function (client) {
        client.send(data);
      });
    }
  }, {
    key: 'handleIncomingCommand',
    value: function handleIncomingCommand(client, data) {
      this.fire('commandReceived', { client: client, data: data });

      if (this.commandHandlers.hasOwnProperty(data.command)) {
        this.commandHandlers[data.command].forEach(function (handler) {
          handler(client, data);
        });
      } else if (DEBUG_MODE) {
        console.warn('No handler defiend for: ', data.command);
      }
    }
  }, {
    key: 'addCommandListener',
    value: function addCommandListener(command, handler) {
      // If there is a command listener for this command already, push.
      if (this.commandHandlers.hasOwnProperty(command)) {
        this.commandHandlers[command].push(handler);
      } else {
        this.commandHandlers[command] = [handler];
      }
    }
  }, {
    key: 'on',
    value: function on(eventName, handler) {
      // If there is a event listener for this event already, push.
      if (this.eventHandlers.hasOwnProperty(eventName)) {
        this.eventHandlers.push(handler);
      } else {
        this.eventHandlers[eventName] = [handler];
      }
    }
  }, {
    key: 'fire',
    value: function fire(eventName, data) {
      if (this.eventHandlers.hasOwnProperty(eventName)) {
        this.eventHandlers[eventName].forEach(function (handler) {
          if (typeof data !== 'undefined') {
            handler(data);
          } else {
            handler();
          }
        });
      }
    }
  }]);

  return ClientManager;
})();

module.exports = ClientManager;