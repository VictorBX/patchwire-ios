'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _ = require('lodash');
var TERMINATING_CHARACTER = '\0';
var DEBUG_MODE = process.env.GM_SERVER_DEBUG === 'true';

var Client = (function () {
  function Client(socket) {
    var _this = this;

    _classCallCheck(this, Client);

    this.socket = socket;
    this.dataHandlers = [];
    this.clientId = _.uniqueId();
    this.created = Date.now();
    this.data = {};

    socket.on('data', function (data) {

      var dataAsObject = Client.getObjectFromRaw(data);

      if (DEBUG_MODE) {
        console.info(_this.clientId, ' received: ', JSON.stringify(dataAsObject));
      }

      _this.dataHandlers.forEach(function (handler) {
        handler(dataAsObject);
      });
    });

    this.send({
      command: 'connected'
    });
  }

  _createClass(Client, [{
    key: 'send',
    value: function send(command, data) {

      if (typeof data === 'undefined') {
        data = command;
      } else {
        data.command = command;
      }

      var jsonToSend = JSON.stringify(data);

      if (DEBUG_MODE) {
        console.info(this.clientId, ' is sending: ', jsonToSend);
      }

      this.socket.write(jsonToSend);
    }
  }, {
    key: 'batchSend',
    value: function batchSend(commandList) {
      this.send({
        batch: true,
        commands: commandList
      });
    }
  }, {
    key: 'set',
    value: function set(key, value) {
      this.data[key] = value;
    }
  }, {
    key: 'get',
    value: function get(key) {
      return this.data[key];
    }
  }, {
    key: 'on',
    value: function on(eventName, handler) {
      this.socket.on(eventName, handler);
    }
  }, {
    key: 'onData',
    value: function onData(handler) {
      this.dataHandlers.push(handler);
    }
  }], [{
    key: 'getObjectFromRaw',
    value: function getObjectFromRaw(data) {
      var rawSocketDataString = data.toString('ascii');
      var terminatingIndex = rawSocketDataString.indexOf(TERMINATING_CHARACTER);
      var trimmedData;
      if (terminatingIndex > -1) {
        trimmedData = rawSocketDataString.substr(0, terminatingIndex);
      } else {
        trimmedData = rawSocketDataString;
      }
      var objectFromData = JSON.parse(trimmedData);
      return objectFromData;
    }
  }]);

  return Client;
})();

module.exports = Client;